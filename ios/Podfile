require File.join(File.dirname(`node --print "require.resolve('expo/package.json')"`), "scripts/autolinking") 
require File.join(File.dirname(`node --print "require.resolve('react-native/package.json')"`), "scripts/react_native_pods") 
require 'json' 
podfile_properties = JSON.parse(File.read(File.join(__dir__, 'Podfile.properties.json'))) rescue {}  

ENV['RCT_NEW_ARCH_ENABLED'] = podfile_properties['newArchEnabled'] == 'true' ? '1' : '0' 
ENV['EX_DEV_CLIENT_NETWORK_INSPECTOR'] = podfile_properties['EX_DEV_CLIENT_NETWORK_INSPECTOR']  

platform :ios, '15.1' 
install! 'cocoapods', :deterministic_uuids => false  

prepare_react_native_project!  

# Tell React Native Firebase to use static frameworks
$RNFirebaseAsStaticFramework = true

target 'FocusLinkNew' do
  use_expo_modules!  
  
  if ENV['EXPO_USE_COMMUNITY_AUTOLINKING'] == '1'
    config_command = ['node', '-e', "process.argv=['', '', 'config'];require('@react-native-community/cli').run()"]
  else
    config_command = [
      'node',
      '--no-warnings',
      '--eval',
      'require(require.resolve(\'expo-modules-autolinking\', { paths: [require.resolve(\'expo/package.json\')] }))(process.argv.slice(1))',
      'react-native-config',
      '--json',
      '--platform',
      'ios'
    ]
  end  
  
  config = use_native_modules!(config_command)  
  
  use_frameworks! :linkage => podfile_properties['ios.useFrameworks'].to_sym if podfile_properties['ios.useFrameworks']
  use_frameworks! :linkage => ENV['USE_FRAMEWORKS'].to_sym if ENV['USE_FRAMEWORKS']  
  
  use_modular_headers!  
  
  use_react_native!(
    :path => config[:reactNativePath],
    :hermes_enabled => podfile_properties['expo.jsEngine'] == nil || podfile_properties['expo.jsEngine'] == 'hermes',
    :app_path => "#{Pod::Config.instance.installation_root}/..",
    :privacy_file_aggregation_enabled => podfile_properties['apple.privacyManifestAggregationEnabled'] != 'false',
  )  
  
  # Include Firebase dependencies with the version required by the modules
  pod 'Firebase/Auth', '11.11.0'
  pod 'Firebase/Core', '11.11.0'
  
  # Explicitly exclude RNFBFirestore from linking
  pod 'RNFBFirestore', :path => '../node_modules/@react-native-firebase/firestore', :modular_headers => true
  
  post_install do |installer|
    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false,
      :ccache_enabled => podfile_properties['apple.ccacheEnabled'] == 'true',
    )  
    
    # Set compile flags for all targets
    installer.pods_project.targets.each do |target|
      target.build_configurations.each do |config|
        config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '15.1'
        
        # Disable all warnings for pods
        config.build_settings['GCC_WARN_INHIBIT_ALL_WARNINGS'] = 'YES'
        config.build_settings['SWIFT_SUPPRESS_WARNINGS'] = 'YES'
        
        # Add additional flags for FirebaseFirestore if it exists
        if ['FirebaseFirestore', 'gRPC-Core', 'gRPC-C++', 'leveldb-library'].include?(target.name)
          config.build_settings['OTHER_CFLAGS'] ||= ['$(inherited)']
          config.build_settings['OTHER_CFLAGS'] << '-w' # Disable all warnings
          
          # Disable problematic C++ features
          config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']
          config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << '_STDIO_H_=1'
          config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'FIREBASE_USE_EXPLICIT_SWIFT_MODULE_MAP=1'
        end
      end
    end  
    
    # Resource bundle configurations
    installer.target_installation_results.pod_target_installation_results
      .each do |pod_name, target_installation_result|
      target_installation_result.resource_bundle_targets.each do |resource_bundle_target|
        resource_bundle_target.build_configurations.each do |config|
          config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
        end
      end
    end  
    
    # Bundle and script configurations
    installer.pods_project.targets.each do |target|
      if target.respond_to?(:product_type) && target.product_type == "com.apple.product-type.bundle"
        target.build_configurations.each do |config|
          config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
        end
      end
      
      target.build_phases.each do |build_phase|
        if build_phase.respond_to?(:shell_script) && build_phase.shell_script.include?('[CP-User]')
          build_phase.always_out_of_date = true
        end
      end
    end
  end
end
